@model ServiceWorkerWebsite.Models.Booking

@{

    ViewData["Title"] = "Create";

}
<style>
    body {
        background-color: #f0f2f5; /* Soft background color */
    }

    .container {
        padding-top: 20px;
    }

    h1, h4 {
        color: mediumpurple; /* Dark grey color for headings */
    }

    .form-group {
        margin-bottom: 1rem;
    }

    label {
        font-weight: 600;
        color: #555; /* Slightly darker grey for labels */
    }

    .form-control {
        border-radius: 0.25rem; /* Rounded borders for form inputs */
        border: 1px solid #ced4da; /* Light grey border */
        padding: 0.375rem 0.75rem; /* Padding inside inputs */
    }

        .form-control:focus {
            border-color: #80bdff; /* Highlight color when focused */
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(128, 189, 255, 0.6); /* Subtle shadow for depth */
        }

    .form-check-input {
        width: 20px;
        height: 20px; /* Larger checkbox */
        margin-top: 0.3rem; /* Align checkbox vertically with label */
        margin-right: 0.5rem; /* Space between checkbox and label */
    }

    .btn-primary {
        background-color: #007bff; /* Primary button color */
        border-color: #007bff; /* Border color to match */
        color: #fff; /* White text */
        padding: 0.5rem 1rem; /* Padding inside button */
        border-radius: 0.25rem; /* Rounded borders for buttons */
        font-size: 1rem; /* Button text size */
        line-height: 1.5; /* Line height for button text */
    }

        .btn-primary:hover {
            background-color: #0056b3; /* Darker shade for hover state */
            border-color: #004085; /* Border color for hover state */
        }

    .text-danger {
        color: #dc3545; /* Bootstrap default danger color */
    }

    /* Add more custom styles as needed */
</style>


<h1>Create</h1>

<h4>Booking</h4>

<hr />

<div class="row">

    <div class="col-md-4">

        <form id="bookingForm" asp-action="Create">

            <input type="hidden" asp-for="Worker_Id" value="@ViewData["Worker_Id"]" /> <!-- Hidden field for WorkerId -->

            <input type="hidden" asp-for="Service_Id" value="@ViewData["Service_Id"]" /> <!-- Hidden field for ServiceId -->
            <!--@{

                // Cast ViewData["AvailableTimeSlots"] to the appropriate IEnumerable type

                var timeSlots = ViewData["AvailableTimeSlots"] as SelectList;

            }

                         <div class="form-group">

                             <label asp-for="TimeSlotId" class="control-label">Time Slot</label>

                             <select asp-for="TimeSlotId" class="form-control" asp-items="@timeSlots">

                                 <option value="">Please select a time slot</option>

                             </select>

                             <span asp-validation-for="TimeSlotId" class="text-danger"></span>

                         </div>

                          -->
            @{
                // Get today's date and the date 7 days from today, formatted as "yyyy-MM-dd"
                string today = DateTime.Today.ToString("yyyy-MM-dd");
                string maxDate = DateTime.Today.AddDays(7).ToString("yyyy-MM-dd");
            }

            <input asp-for="BookingDate" class="form-control" id="BookingDate" type="date" min="@today" max="@maxDate" />


            <select asp-for="TimeSlotId" class="form-control" id="TimeSlotId" ...>

                <option value="">Please select a time slot</option>

            </select>


            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">

                <label asp-for="Service_Id" class="control-label"></label>

                <input type="text" readonly class="form-control" value="@ViewData["Service_Id"]" /> <!-- Display the ServiceId as readonly -->

                <span asp-validation-for="Service_Id" class="text-danger"></span>

            </div>


            <div class="form-group">

                <label asp-for="CustomerName" class="control-label"></label>

                <input asp-for="CustomerName" class="form-control" />

                <span asp-validation-for="CustomerName" class="text-danger"></span>

            </div>

            <div class="form-group">

                <label asp-for="CustomerContact" class="control-label"></label>

                <input asp-for="CustomerContact" class="form-control" />

                <span asp-validation-for="CustomerContact" class="text-danger"></span>

            </div>

            <div class="form-group form-check">

                <label class="form-check-label">

                    <input class="form-check-input" asp-for="AgreeToTerms" /> @Html.DisplayNameFor(model => model.AgreeToTerms)

                </label>

                <span asp-validation-for="AgreeToTerms" class="text-danger"></span>

            </div>

            <div class="form-group">

                <input type="submit" value="Create" class="btn btn-primary" />

            </div>

        </form>

    </div>

</div>

<div>

    <a asp-action="Index">Back to List</a>

</div>


<script>

    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById("BookingDate").addEventListener("change", function () {
            var selectedDate = this.value; // Get the selected date
            var workerId = document.getElementById("Worker_Id").value; // Assuming you have a worker ID to send

            // Make an AJAX call to fetch time slots
            fetch('/Bookings/GetTimeSlotsForDate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value // Add anti-forgery token
                },
                body: JSON.stringify({ date: selectedDate, workerId: workerId })
            })
                .then(response => response.json())
                .then(data => {
                    var timeSlotSelect = document.getElementById("TimeSlotId"); // Your time slot select element
                    timeSlotSelect.innerHTML = '<option value="">Please select a timeslot</option>'; // Clear current options

                    if (data.length === 1 && data[0].value === "-1") {
                        // No time slots available, show a placeholder option
                        var option = new Option(data[0].text, "Taken");
                        option.disabled = true;
                        timeSlotSelect.add(option);
                    } else {
                        // Populate the dropdown with available time slots
                        data.forEach(function (timeSlot) {
                            var option = new Option(timeSlot.text, timeSlot.value);
                            timeSlotSelect.add(option);
                        });
                    }
                })
                .catch(error => console.error('Error fetching time slots:', error));
        });
    });



    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
        }


</script>