@model ServiceWorkerWebsite.Models.Booking

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>
<h4>Booking</h4>
<hr />

<div class="row">
    <div class="col-md-4">
        <form id="bookingForm" asp-action="Create">
            <input type="hidden" asp-for="Worker_Id" value="@ViewData["Worker_Id"]" />

            <label for="BookingDate">Select Date</label>
            <select asp-for="BookingDate" class="form-control" id="BookingDate">
                <option value="">Select a date</option>
            </select>

            <label for="TimeSlotId">Select Time Slot</label>
            <select asp-for="TimeSlotId" class="form-control" id="TimeSlotId">
                <option value="">Please select a time slot</option>
            </select>

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="CustomerName" class="control-label"></label>
              <!--  <input asp-for="CustomerName" class="form-control" /> -->
                <input asp-for="CustomerName" class="form-control" value="@ViewData["CustomerName"]" readonly />
                <span asp-validation-for="CustomerName" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var workerId = document.getElementById("Worker_Id").value;

        console.log("Sending Worker ID: ", workerId); // Check the value before sending

        fetch('/Bookings/GetAvailableSlots', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value
            },
            body: JSON.stringify({ workerId: parseInt(workerId) }) // Make sure this is an object
        })

            .then(response => response.json())
            .then(data => {
                var dateSelect = document.getElementById("BookingDate");
                var timeSlotSelect = document.getElementById("TimeSlotId");

                data.forEach(function (item) {
                    var option = new Option(item.date, item.date);
                    dateSelect.add(option);
                });

                dateSelect.addEventListener("change", function () {
                    var selectedDate = this.value;
                    timeSlotSelect.innerHTML = '<option value="">Please select a time slot</option>'; // Reset time slots

                    var selectedTimeSlots = data.find(d => d.date === selectedDate)?.timeSlots.split(',') || [];
                    selectedTimeSlots.forEach(function (timeSlot) {
                        var option = new Option(timeSlot, timeSlot);
                        timeSlotSelect.add(option);
                    });
                });
            })
            .catch(error => console.error('Error fetching available slots:', error));
    });
</script>
